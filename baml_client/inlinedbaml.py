###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT4oMini {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Sonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> Haiku {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [GPT4oMini, Haiku]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [GPT4o, GPT4oMini]\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.57.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "numbers.baml": "\n\nclass HandsReponse {\n    hands Hand[]\n}\n\nclass Hand {\n    isRealHand bool\n    heldUp bool\n    numberFingers int\n}\n\nfunction HandsHoldingUpNumbers(arg: image) -> HandsReponse {\n    client \"openai/gpt-4o\"\n    prompt #\"\n        {{ ctx.output_format }}\n\n        {{ _.role('user') }}\n        {{ arg }}\n    \"#\n}\n\nenum UpType {\n    FullyUp @alias(k0) @description(#\"\n        intentionally meant to count\n    \"#)\n    HalfUp @alias(k1) @description(#\"\n       counts as a half vote\n    \"#)\n    Down @alias(k2) @description(#\"\n        its not intended to count\n    \"#)\n\n    @@alias(FingerVisibility)\n}\n\nclass HandDescription {\n    thumbUp UpType\n    indexFingerUp UpType\n    middleFingerUp UpType\n    ringFingerUp UpType\n    pinkyFingerUp UpType\n}\n\nfunction DescribeHand(arg: image, num_hands: int) -> HandDescription[] {\n    client \"openai/gpt-4o\"\n    prompt #\"\n        There are atleast {{ num_hands }} hands in the image.\n\n        {{ ctx.output_format }}\n\n        {{ _.role('user') }}\n        {{ arg }}\n    \"#\n}\n\ntest TestName {\n  functions [HandsHoldingUpNumbers]\n  args {\n    arg {\n        url \"https://imgs.xkcd.com/comics/standards.png\"\n    }\n  }\n}\n\n\ntest TestName1 {\n  functions [DescribeHand]\n  args {\n    num_hands 1\n    arg {\n        file \"./num1.png\"\n    }\n  }\n}\n\n\ntest TestName1 {\n  functions [HandsHoldingUpNumbers]\n  args {\n    arg {\n        file \"./num1.png\"\n    }\n  }\n}\n\n\ntest TestName2 {\n  functions [DescribeHand]\n  args {\n    num_hands 2\n    arg {\n        file \"./num2.png\"\n    }\n  }\n}\n\ntest TestName2 {\n  functions [HandsHoldingUpNumbers]\n  args {\n    arg {\n        file \"./num2.png\"\n    }\n  }\n}\n\n\ntest TestName3 {\n  functions [HandsHoldingUpNumbers]\n  args {\n    arg {\n        file \"./num3.png\"\n    }\n  }\n}\n\ntest TestName3 {\n  functions [DescribeHand]\n  args {\n    num_hands 3\n    arg {\n        file \"./num3.png\"\n    }\n  }\n}\n\n\ntest TestName4 {\n  functions [HandsHoldingUpNumbers]\n  args {\n    arg {\n        file \"./num4.png\"\n    }\n  }\n}\n",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience Experience[]\n  skills string[]\n}\n\nclass Experience {\n  role string\n  company string\n}\n\n// Creating a function to extract the resume from a string.\nfunction ExtractResume(resume: image | string) -> Resume {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    {{ _.role('user') }}\n\n    Extract from this content:\n    -----------\n    {{ resume }}\n    ----------\n\n    {{ ctx.output_format }}\n\n    DONT USE QUOTES IN STRINGS\n  \"#\n}\n\ntest png_resume {\n  functions [ExtractResume]\n  args {\n    resume {\n      file \"vai.png\"\n    }\n  }\n}\n\n// Testing the function with a sample resume.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
}

def get_baml_files():
    return file_map